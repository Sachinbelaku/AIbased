<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Indian Equity Market App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0d122b;
            color: #e2e8f0;
        }
        .container {
            max-width: 1280px;
            margin: 0 auto;
            padding: 2rem;
        }
        .card {
            background-color: #1a2341;
            border-radius: 1rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            border: 1px solid #2e3a5a;
        }
        .glow-button {
            position: relative;
            z-index: 10;
            overflow: hidden;
            transition: all 0.3s ease-in-out;
            border-radius: 0.75rem;
        }
        .glow-button::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 300%;
            height: 300%;
            background: conic-gradient(from 0deg, #00A880, #002D62, #00A880, #002D62, #00A880);
            animation: rotate 4s linear infinite;
            z-index: -1;
            transform: translate(-50%, -50%);
            opacity: 0.8;
            transition: all 0.5s ease-in-out;
        }
        .glow-button:hover::before {
            width: 150%;
            height: 150%;
        }
        @keyframes rotate {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }
        .chat-bubble {
            border-radius: 1rem;
            padding: 0.75rem 1.25rem;
            max-width: 85%;
            word-wrap: break-word;
        }
    </style>
</head>
<body class="bg-slate-950 text-slate-200">

<div class="container min-h-screen flex flex-col items-center">
    <h1 class="text-4xl sm:text-5xl font-bold text-center mt-8 mb-6 text-transparent bg-clip-text bg-gradient-to-r from-green-500 to-blue-500">
        Indian Equity Market App
    </h1>

    <!-- Search and Index Dashboard -->
    <div class="w-full flex flex-col md:flex-row gap-4 mb-6">
        <div class="card w-full md:w-2/3">
            <input type="text" id="stockSearchInput" placeholder="Search for a stock (e.g., RELIANCE.NS)" class="w-full p-3 rounded-lg bg-slate-800 border border-slate-700 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-green-400 transition-all">
        </div>
        <div class="card w-full md:w-1/3 flex flex-col justify-center">
            <h3 class="text-lg font-semibold mb-2">Key Indices</h3>
            <div class="flex flex-col sm:flex-row justify-around">
                <div class="flex-1 text-center">
                    <p class="text-slate-400">NIFTY 50</p>
                    <p id="niftyValue" class="text-xl font-bold text-green-400">--.--</p>
                    <p id="niftyChange" class="text-sm">--.--%</p>
                </div>
                <div class="flex-1 text-center mt-4 sm:mt-0">
                    <p class="text-slate-400">SENSEX</p>
                    <p id="sensexValue" class="text-xl font-bold text-green-400">--.--</p>
                    <p id="sensexChange" class="text-sm">--.--%</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Navigation Tabs -->
    <div class="w-full flex justify-center mb-6">
        <button onclick="showPage('screener')" class="py-2 px-4 rounded-t-lg font-semibold transition-colors duration-200" id="screenerTab">Stock Screener</button>
        <button onclick="showPage('volatility')" class="py-2 px-4 rounded-t-lg font-semibold transition-colors duration-200" id="volatilityTab">Volatility Calendar</button>
        <button onclick="showPage('aiAgent')" class="py-2 px-4 rounded-t-lg font-semibold transition-colors duration-200" id="aiAgentTab">AI Market Agent</button>
    </div>

    <!-- Main Content Area -->
    <div id="mainContent" class="w-full card flex-1">
        <!-- Stock Screener (Default View) -->
        <div id="screenerView" class="page-content">
            <h2 class="text-2xl font-semibold mb-4">Stock Screener</h2>
            <p class="text-slate-400 mb-6">Filter stocks based on your criteria. Note: This is a prototype with static data.</p>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
                <div class="p-4 bg-slate-800 rounded-lg">
                    <label for="peRatio" class="block text-sm font-medium mb-1">P/E Ratio</label>
                    <input type="range" id="peRatio" min="1" max="50" value="1" class="w-full h-2 bg-slate-600 rounded-lg appearance-none cursor-pointer">
                    <span class="text-xs text-slate-400">Min: <span id="peRatioValue">1</span></span>
                </div>
                <div class="p-4 bg-slate-800 rounded-lg">
                    <label for="marketCap" class="block text-sm font-medium mb-1">Market Cap (â‚¹ Cr)</label>
                    <select id="marketCap" class="w-full p-2 rounded-lg bg-slate-700 border border-slate-600 focus:outline-none">
                        <option value="all">All</option>
                        <option value="large">Large Cap (> â‚¹20,000 Cr)</option>
                        <option value="mid">Mid Cap (â‚¹5,000-20,000 Cr)</option>
                        <option value="small">Small Cap (< â‚¹5,000 Cr)</option>
                    </select>
                </div>
                <div class="p-4 bg-slate-800 rounded-lg">
                    <label for="sector" class="block text-sm font-medium mb-1">Sector</label>
                    <select id="sector" class="w-full p-2 rounded-lg bg-slate-700 border border-slate-600 focus:outline-none">
                        <option value="all">All</option>
                        <option value="tech">Technology</option>
                        <option value="finance">Financials</option>
                        <option value="pharma">Pharmaceuticals</option>
                    </select>
                </div>
            </div>

            <div id="screenerResults" class="overflow-x-auto">
                <!-- Table will be populated dynamically -->
            </div>

            <div id="stockDetails" class="hidden">
                <button onclick="showPage('screener')" class="bg-slate-700 hover:bg-slate-600 text-white font-bold py-2 px-4 rounded-lg mb-4 transition-colors">
                    &larr; Back to Screener
                </button>
                <div id="stockDetailContent">
                    <!-- Stock details will be populated dynamically -->
                </div>
            </div>
        </div>

        <!-- Volatility Calendar -->
        <div id="volatilityView" class="page-content hidden">
            <h2 class="text-2xl font-semibold mb-4">Volatility Calendar</h2>
            <p class="text-slate-400 mb-6">Track major economic events that can impact the market. Volatility is rated from Low (ðŸ”µ) to High (ðŸ”´).</p>
            <div id="calendar" class="space-y-4">
                <div class="card flex justify-between items-center">
                    <div>
                        <span class="font-bold text-lg">June 20, 2025: RBI Monetary Policy Meeting</span>
                        <p class="text-sm text-slate-400">Anticipated interest rate decision.</p>
                    </div>
                    <span class="text-red-400 font-bold text-xl" title="High Volatility">ðŸ”´</span>
                </div>
                <div class="card flex justify-between items-center">
                    <div>
                        <span class="font-bold text-lg">June 25, 2025: WPI & CPI Inflation Data</span>
                        <p class="text-sm text-slate-400">Release of wholesale and consumer price index data.</p>
                    </div>
                    <span class="text-yellow-400 font-bold text-xl" title="Medium Volatility">ðŸŸ¡</span>
                </div>
                <div class="card flex justify-between items-center">
                    <div>
                        <span class="font-bold text-lg">July 1, 2025: GST Collection Data</span>
                        <p class="text-sm text-slate-400">Monthly GST collection figures announcement.</p>
                    </div>
                    <span class="text-blue-400 font-bold text-xl" title="Low Volatility">ðŸ”µ</span>
                </div>
            </div>
        </div>

        <!-- AI Market Agent -->
        <div id="aiAgentView" class="page-content hidden flex flex-col h-full">
            <h2 class="text-2xl font-semibold mb-4">AI Market Intelligence Agent</h2>
            <!-- Authentication Gate -->
            <div id="authGate" class="flex flex-col items-center justify-center flex-1 text-center">
                <i class="fas fa-lock text-6xl text-slate-500 mb-4"></i>
                <p class="text-xl font-semibold mb-2">Sign in to use the AI Agent</p>
                <p class="text-slate-400 mb-4">This feature requires a user account for a personalized experience.</p>
                <button id="loginButton" class="glow-button px-6 py-3 bg-gradient-to-r from-green-600 to-blue-500 text-white font-bold rounded-lg transition-all">
                    Sign In
                </button>
            </div>
            
            <!-- Chat Window (hidden initially) -->
            <div id="chatInterface" class="hidden flex-1 flex flex-col">
                <div id="chatWindow" class="card flex-1 overflow-y-auto p-4 mb-4 space-y-4">
                    <div class="flex justify-start">
                        <div class="chat-bubble bg-slate-800 text-sm">Hello! I'm your AI Market Agent. Ask me anything about the Indian equity market.</div>
                    </div>
                </div>
                <div class="flex items-center gap-2">
                    <input type="text" id="chatInput" placeholder="Ask me about a stock, a trend, or a strategy..." class="flex-1 p-3 rounded-lg bg-slate-800 border border-slate-700 text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-green-400 transition-all">
                    <button id="sendChatBtn" class="bg-green-600 hover:bg-green-500 text-white p-3 rounded-lg font-bold transition-colors">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="module">
    // Firebase and API Constants
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
    
    // Global variables provided by the environment.
    const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
    const API_KEY = "";
    const geminiTextApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${API_KEY}`;
    
    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);
    
    let userId = null;

    // UI Elements
    const niftyValueEl = document.getElementById('niftyValue');
    const niftyChangeEl = document.getElementById('niftyChange');
    const sensexValueEl = document.getElementById('sensexValue');
    const sensexChangeEl = document.getElementById('sensexChange');
    const peRatioInput = document.getElementById('peRatio');
    const peRatioValueEl = document.getElementById('peRatioValue');
    const marketCapSelect = document.getElementById('marketCap');
    const sectorSelect = document.getElementById('sector');
    const screenerResultsEl = document.getElementById('screenerResults');
    const stockSearchInput = document.getElementById('stockSearchInput');
    const stockDetailsEl = document.getElementById('stockDetails');
    const stockDetailContentEl = document.getElementById('stockDetailContent');
    const authGateEl = document.getElementById('authGate');
    const chatInterfaceEl = document.getElementById('chatInterface');
    const loginButtonEl = document.getElementById('loginButton');
    const chatWindowEl = document.getElementById('chatWindow');
    const chatInputEl = document.getElementById('chatInput');
    const sendChatBtnEl = document.getElementById('sendChatBtn');

    // Mock data for a public-facing app
    const mockIndexData = {
        nifty: { value: 23550.20, change: 0.45 },
        sensex: { value: 77209.90, change: 0.52 }
    };

    const mockScreenerData = [
        { ticker: 'RELIANCE.NS', name: 'Reliance Industries', sector: 'Oil & Gas', marketCap: 'large', pe: 28.5, price: 2950.40 },
        { ticker: 'TCS.NS', name: 'Tata Consultancy Services', sector: 'tech', marketCap: 'large', pe: 32.1, price: 3850.15 },
        { ticker: 'HDFCBANK.NS', name: 'HDFC Bank', sector: 'finance', marketCap: 'large', pe: 19.8, price: 1520.70 },
        { ticker: 'INFY.NS', name: 'Infosys', sector: 'tech', marketCap: 'large', pe: 29.5, price: 1625.30 },
        { ticker: 'TATAMOTORS.NS', name: 'Tata Motors', sector: 'Automotive', marketCap: 'mid', pe: 15.4, price: 950.25 },
        { ticker: 'CIPLA.NS', name: 'Cipla', sector: 'pharma', marketCap: 'large', pe: 26.7, price: 1480.90 },
        { ticker: 'IRCTC.NS', name: 'Indian Railway Catering', sector: 'Tourism', marketCap: 'mid', pe: 95.2, price: 1050.50 }
    ];

    const mockStockDetails = {
        'RELIANCE.NS': {
            name: 'Reliance Industries Ltd.',
            price: 2950.40,
            change: 12.50,
            changePercent: 0.42,
            financials: {
                pe: 28.5,
                pb: 2.5,
                eps: 103.5,
                divYield: 0.35
            },
            news: [
                "Reliance to launch new green energy project.",
                "Q4 earnings beat analyst expectations.",
                "New partnership announced in petrochemicals division."
            ],
            indicators: {
                rsi: 65,
                macD: 'Bullish Crossover'
            }
        },
        'TCS.NS': {
            name: 'Tata Consultancy Services Ltd.',
            price: 3850.15,
            change: -8.20,
            changePercent: -0.21,
            financials: {
                pe: 32.1,
                pb: 12.8,
                eps: 120.4,
                divYield: 1.2
            },
            news: [
                "TCS wins major contract with European bank.",
                "Company announces share buyback program.",
                "Experts weigh in on future outlook for IT sector."
            ],
            indicators: {
                rsi: 48,
                macD: 'Bearish Crossover'
            }
        },
    };

    // --- Firebase Authentication Listener ---
    onAuthStateChanged(auth, (user) => {
        if (user) {
            userId = user.uid;
            console.log("User signed in with UID:", userId);
        } else {
            userId = null;
            console.log("User is signed out.");
        }
    });

    // --- Core Application Logic ---

    function showPage(pageId) {
        const pages = ['screenerView', 'volatilityView', 'aiAgentView'];
        pages.forEach(id => {
            const el = document.getElementById(id);
            if (el) el.classList.add('hidden');
        });
        document.getElementById(pageId + 'View').classList.remove('hidden');

        const tabs = ['screenerTab', 'volatilityTab', 'aiAgentTab'];
        tabs.forEach(id => {
            const el = document.getElementById(id);
            if (el) {
                el.classList.remove('text-green-400', 'border-b-2', 'border-green-400');
                el.classList.add('text-slate-400');
            }
        });
        const activeTab = document.getElementById(pageId + 'Tab');
        if (activeTab) {
            activeTab.classList.add('text-green-400', 'border-b-2', 'border-green-400');
            activeTab.classList.remove('text-slate-400');
        }

        // Handle the AI Agent view based on authentication status
        if (pageId === 'aiAgent') {
            if (userId) {
                authGateEl.classList.add('hidden');
                chatInterfaceEl.classList.remove('hidden');
            } else {
                authGateEl.classList.remove('hidden');
                chatInterfaceEl.classList.add('hidden');
            }
        }
    }

    // Utility function to format numbers
    const formatNumber = (num) => {
        return num.toFixed(2);
    };

    // Function to render the key indices data
    function renderIndices() {
        const { nifty, sensex } = mockIndexData;
        niftyValueEl.textContent = formatNumber(nifty.value);
        niftyChangeEl.textContent = `${formatNumber(nifty.change)}%`;
        niftyChangeEl.className = `text-sm ${nifty.change >= 0 ? 'text-green-400' : 'text-red-400'}`;

        sensexValueEl.textContent = formatNumber(sensex.value);
        sensexChangeEl.textContent = `${formatNumber(sensex.change)}%`;
        sensexChangeEl.className = `text-sm ${sensex.change >= 0 ? 'text-green-400' : 'text-red-400'}`;
    }

    // Function to render the stock screener table
    function renderScreenerResults(data) {
        let tableHtml = `
            <table class="min-w-full divide-y divide-slate-700 rounded-lg overflow-hidden">
                <thead class="bg-slate-800">
                    <tr>
                        <th class="px-4 py-3 text-left text-xs font-semibold uppercase tracking-wider text-slate-400">Ticker</th>
                        <th class="px-4 py-3 text-left text-xs font-semibold uppercase tracking-wider text-slate-400">Name</th>
                        <th class="px-4 py-3 text-left text-xs font-semibold uppercase tracking-wider text-slate-400">P/E Ratio</th>
                        <th class="px-4 py-3 text-left text-xs font-semibold uppercase tracking-wider text-slate-400">Market Cap</th>
                        <th class="px-4 py-3 text-left text-xs font-semibold uppercase tracking-wider text-slate-400">Price (â‚¹)</th>
                    </tr>
                </thead>
                <tbody class="bg-slate-900 divide-y divide-slate-800">
        `;

        data.forEach(stock => {
            tableHtml += `
                <tr class="hover:bg-slate-800 cursor-pointer transition-colors" onclick="showStockDetails('${stock.ticker}')">
                    <td class="px-4 py-4 whitespace-nowrap text-sm font-medium text-green-400 hover:underline">${stock.ticker}</td>
                    <td class="px-4 py-4 whitespace-nowrap text-sm text-slate-200">${stock.name}</td>
                    <td class="px-4 py-4 whitespace-nowrap text-sm text-slate-200">${formatNumber(stock.pe)}</td>
                    <td class="px-4 py-4 whitespace-nowrap text-sm text-slate-200">${stock.marketCap.toUpperCase()}</td>
                    <td class="px-4 py-4 whitespace-nowrap text-sm text-slate-200">${formatNumber(stock.price)}</td>
                </tr>
            `;
        });

        tableHtml += `
                </tbody>
            </table>
        `;
        screenerResultsEl.innerHTML = tableHtml;
    }

    // Function to filter and update the screener results
    function updateScreener() {
        const peValue = parseFloat(peRatioInput.value);
        const marketCapValue = marketCapSelect.value;
        const sectorValue = sectorSelect.value;
        
        const filteredData = mockScreenerData.filter(stock => {
            const matchesPE = stock.pe >= peValue;
            const matchesMarketCap = marketCapValue === 'all' || stock.marketCap === marketCapValue;
            const matchesSector = sectorValue === 'all' || stock.sector.toLowerCase() === sectorValue;
            return matchesPE && matchesMarketCap && matchesSector;
        });

        renderScreenerResults(filteredData);
    }

    // Function to show a single stock's detailed view
    function showStockDetails(ticker) {
        showPage('screener');
        document.getElementById('screenerView').classList.add('flex');
        document.getElementById('screenerView').classList.remove('flex-1');
        document.getElementById('screenerResults').classList.add('hidden');
        document.getElementById('stockDetails').classList.remove('hidden');

        const stockData = mockStockDetails[ticker] || {
            name: ticker,
            price: 0,
            change: 0,
            changePercent: 0,
            financials: {},
            news: [],
            indicators: {}
        };

        const changeClass = stockData.change >= 0 ? 'text-green-400' : 'text-red-400';
        
        // This is where a chart would be rendered.
        // In a real app, you would use a library like d3.js or Chart.js
        const chartHtml = `
            <div class="bg-slate-900 rounded-lg p-6 mb-6">
                <p class="text-slate-400 text-center">Interactive chart with technical indicators would be displayed here.</p>
                <div class="h-64 flex items-center justify-center text-slate-500">
                    <p>Candlestick Chart Placeholder</p>
                </div>
            </div>
        `;

        let detailsHtml = `
            <div class="flex flex-col md:flex-row justify-between items-center mb-6">
                <h3 class="text-3xl font-bold">${stockData.name} (${ticker})</h3>
                <div class="text-right mt-4 md:mt-0">
                    <p class="text-4xl font-extrabold">${formatNumber(stockData.price)} <span class="text-sm text-slate-400">â‚¹</span></p>
                    <p class="text-lg font-semibold ${changeClass}">${formatNumber(stockData.change)} (${formatNumber(stockData.changePercent)}%)</p>
                </div>
            </div>

            ${chartHtml}

            <!-- Financials, Indicators, and News -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div class="card">
                    <h4 class="text-xl font-semibold mb-3">Key Financials & Technicals</h4>
                    <p class="text-sm"><span class="font-bold">P/E Ratio:</span> ${formatNumber(stockData.financials.pe)}</p>
                    <p class="text-sm"><span class="font-bold">P/B Ratio:</span> ${formatNumber(stockData.financials.pb)}</p>
                    <p class="text-sm"><span class="font-bold">EPS:</span> â‚¹${formatNumber(stockData.financials.eps)}</p>
                    <p class="text-sm"><span class="font-bold">Dividend Yield:</span> ${formatNumber(stockData.financials.divYield)}%</p>
                    <div class="mt-4">
                        <p class="text-sm"><span class="font-bold">RSI:</span> ${stockData.indicators.rsi} <span class="text-slate-400">(Relative Strength Index)</span></p>
                        <p class="text-sm"><span class="font-bold">MACD:</span> ${stockData.indicators.macD} <span class="text-slate-400">(Moving Average Convergence Divergence)</span></p>
                    </div>
                </div>

                <div class="card">
                    <h4 class="text-xl font-semibold mb-3">Recent News & Sentiment</h4>
                    <ul class="list-disc list-inside space-y-2 mb-4">
                        ${stockData.news.map(n => `<li class="text-sm text-slate-300">${n}</li>`).join('')}
                    </ul>
                    <div class="flex justify-between items-center mt-2">
                        <p class="text-sm font-bold">Overall Sentiment:</p>
                        <span id="sentimentOutput" class="text-sm text-slate-400">
                            <i class="fas fa-spinner fa-spin mr-2"></i>Analyzing...
                        </span>
                    </div>
                    <button onclick="getSentimentAnalysis('${ticker}')" class="w-full mt-4 glow-button px-4 py-2 bg-gradient-to-r from-blue-600 to-green-500 text-white font-bold rounded-lg transition-all">
                        Get Sentiment Analysis
                    </button>
                </div>
            </div>
            
            <div class="card mt-6">
                <h4 class="text-xl font-semibold mb-3">AI-Powered Strategy Idea</h4>
                <div id="strategyOutput" class="text-slate-200">
                    <p class="text-sm text-slate-400">Click below to get a potential trading strategy for this stock.</p>
                </div>
                <button onclick="getStrategyIdea('${ticker}')" class="w-full mt-4 glow-button px-4 py-2 bg-gradient-to-r from-green-600 to-blue-500 text-white font-bold rounded-lg transition-all">
                    Generate Strategy Idea
                </button>
            </div>
        `;
        stockDetailContentEl.innerHTML = detailsHtml;

        getSentimentAnalysis(ticker);
    }
    
    async function askGemini(prompt, outputElementId) {
        if (!userId) {
            console.error("User not authenticated. Cannot call AI agent.");
            return;
        }

        const outputEl = document.getElementById(outputElementId);
        if (!outputEl) return;

        let originalContent = outputEl.innerHTML;
        outputEl.innerHTML = `<p class="text-sm text-slate-400"><i class="fas fa-spinner fa-spin mr-2"></i>Thinking...</p>`;
        
        try {
            const payload = { contents: [{ parts: [{ text: prompt }] }] };
            const response = await fetch(geminiTextApiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                console.error('API Error:', await response.json());
                outputEl.innerHTML = `<p class="text-red-400 text-sm">Failed to get AI response. Please try again later.</p>`;
                return;
            }

            const result = await response.json();
            const text = result?.candidates?.[0]?.content?.parts?.[0]?.text || 'No response available.';
            outputEl.innerHTML = `<p class="text-sm">${text}</p>`;

        } catch (error) {
            console.error('Fetch error:', error);
            outputEl.innerHTML = `<p class="text-red-400 text-sm">An error occurred while fetching analysis.</p>`;
        }
    }

    function addChatMessage(message, sender) {
        const isUser = sender === 'user';
        const bubbleClass = isUser ? 'bg-blue-800 text-white self-end text-right' : 'bg-slate-800 text-white self-start';
        const messageHtml = `
            <div class="flex ${isUser ? 'justify-end' : 'justify-start'}">
                <div class="chat-bubble ${bubbleClass}">
                    ${message}
                </div>
            </div>
        `;
        chatWindowEl.innerHTML += messageHtml;
        chatWindowEl.scrollTop = chatWindowEl.scrollHeight;
    }

    function handleChat() {
        const userMessage = chatInputEl.value.trim();
        if (userMessage === '') return;
        if (!userId) {
            addChatMessage("You need to sign in to use the AI Agent.", 'ai');
            return;
        }
        addChatMessage(userMessage, 'user');
        chatInputEl.value = '';
        const prompt = `Act as an AI market analyst for the Indian equity market. Provide a brief, concise response to the following query: "${userMessage}".`;
        askGemini(prompt, 'chatWindow');
    }

    function getSentimentAnalysis(ticker) {
        if (!userId) {
            document.getElementById('sentimentOutput').innerHTML = `<p class="text-sm text-red-400">Please sign in to access AI features.</p>`;
            return;
        }
        const stockData = mockStockDetails[ticker];
        const newsText = stockData.news.join(' ');
        const prompt = `Analyze the following news snippets for ${stockData.name} and provide a one-word sentiment label (Positive, Negative, Neutral) followed by a very brief reason. News: ${newsText}`;
        askGemini(prompt, 'sentimentOutput');
    }

    function getStrategyIdea(ticker) {
        if (!userId) {
            document.getElementById('strategyOutput').innerHTML = `<p class="text-sm text-red-400">Please sign in to access AI features.</p>`;
            return;
        }
        const stockData = mockStockDetails[ticker];
        const prompt = `Based on the following data for ${stockData.name}, suggest a simple trading or investment strategy. Price: â‚¹${stockData.price}, P/E: ${stockData.financials.pe}, Recent news: ${stockData.news.join(', ')}.`;
        askGemini(prompt, 'strategyOutput');
    }

    // Initial setup
    document.addEventListener('DOMContentLoaded', () => {
        renderIndices();
        updateScreener();
        showPage('screener'); 
        
        // Login functionality
        loginButtonEl.addEventListener('click', async () => {
            try {
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }
            } catch (error) {
                console.error("Firebase Auth Error:", error);
            }
        });

        peRatioInput.addEventListener('input', () => {
            peRatioValueEl.textContent = peRatioInput.value;
            updateScreener();
        });
        marketCapSelect.addEventListener('change', updateScreener);
        sectorSelect.addEventListener('change', updateScreener);

        stockSearchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const query = stockSearchInput.value.trim().toUpperCase();
                const stock = mockScreenerData.find(s => s.ticker === query);
                if (stock) {
                    showStockDetails(stock.ticker);
                } else {
                    addChatMessage(`I couldn't find a stock with the ticker "${query}" in my mock data. Try RELIANCE.NS or TCS.NS.`, 'ai');
                }
            }
        });

        chatInputEl.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                handleChat();
            }
        });
        sendChatBtnEl.addEventListener('click', handleChat);
    });

</script>

</body>
</html>
